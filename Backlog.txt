//BLUE //YELLOW //PURPLE //GREEN //RED //Highligher Plugin settings.json uses regex that can be edited.
Project: To-Do List
(remember to keep HTML valid)

//Backlog Refinement//

3s2 item rendering should not be hardcoded in HTML, but rather in JS // 5
Move data to the data sturcture as indicated below
write a function to iterate over the structure and call appendNewItemToDom to append itemns to the list
call the function on load
function sigature is loadData(data: <object defined below>) -> void
Blocked by: 3s1

const tasks = [{
    "content": "Take out the trash.",
    "completed": true
  }, {
    "content": "Brush your teeth.",
    "completed": false
  }, {
    "content": "Take over the world.",
    "completed": false
}];

DoD as website loads, the list of items is displayed that hasn't been hardcoded into HTML

3s5: adjust styling for better user experience // 2
DOD:
items should be rectangular and distinct
text should be easily readable
item status should be distinct, use common knowledge symbolism for complete or incomplete (strikethough/green-red/icons) OR not AND
Delete button should be clearly visible and obvious to it's function
Add hover effects to line items, delete button, and add new button
no unused/unstyled items or empty space

draft for future tickets

4s1: create a handler for "delete" button
create function deleteItem, and set it as a handler for delete button
the function will have the following signature deleteItem(itemIndex: number) -> void
Ex.: deleteItem(2) // this means delete third item
DOD: When delete button is clicked the item disappears from the dom
FLAG: this is blocked until the data gets ingested by the dom, pending estimate
Blocked by 3s2

4s2: create a handler for switching item status
create function toggleStatus
the function will have the following signature: toggleStatus(itemIndex: number) -> void
The function will switch the item status and re-render the dom
Ex.: toggleItem(2) // this will switch the third item from uncompleted to completed or vice versa
DOD: When a list item is clicked, it's appearance changes to reflect it's new status 
Blocked by 3s2

* MVP deployment 

==================END OF REFINEMENT

Look into Font Awesome for Icons

Item 6.1: Learn to add items to an html list, Write a function that takes the title and status and adds item to a html list -> DOM manip happens here // 3
DOD: Function exists and can be demonstrated Function takes the title and status and adds item to a html list -> DOM manip happens here
renderItem("do a thing", false) -> this will add an item at the bottom of the list in HTML

Item 6.4: Write a function that renders the list to the DOM. Iterate through a structure on page load and populate HTML list using the function from 6.1 //2
Blocked by 6.1
DOD function exists and renders the data
HTML list starts empty and is populated by data from the structure on page load
renderAll(tasks) -> this will display items in the list (the function should auto run at load)


Item 8: Write a function that takes input from form in 7, adds the new item to the structure (6) and re-renders the list (6.4) //2
addNewItem("content") -> add the item to the data structure with completed set to false, clear the list in the dom, call renderAll

Item 11: Connect function in Item 8 to a form in item 7 and add basic validation (cannot be blank cannot be bigger than X chars, trim the edges)


Item 9: Functional user input for array removals (Delete Item)
Item 10: Functional method to change item from Non\Completed (Array item property toggle)











Spike3: Learn logical constructs
Be familiar with the following topics
conditionals (<, >, ===, !==, <=, >=)
if statements
while loops
for loops



8 points

