Project: To-Do List
(remember to keep HTML valid)

//Backlog Refinement//

//Week 1//=======================================================================================================
Item 1: Display a rectangle //1
DOD: To clearly distinguish a rectangle on the DOM, whether by shadows, or background, or border or combo thereof

Item 2: Display a header in Item 1 //1
Blockers: Item 1
DOD: Title is clearly visible at the top of rectangle, and has a distinctive design

Item 3: Display Item List (No Logic\Mockup) //2
Blockers: Item 1
DOD: Display a list of hardcoded items underneath the header, with distinctive design, accommodate for large quantity of text.

=================================================================================================================

//Week 2//=======================================================================================================
Item 4: Distinguish between Non\Completed (No Logic\Mockup) //1
Blockers: Item 3
DOD: User can clearly delineate between complete and non-complete items through way of distinct visual cue.

Item 5: Each Item has a delete option (No Logic\Mockup) //1
Blockers: Item 3
DOD: Each list item has a button that (looks like it will) remove the item from the list
=================================================================================================================

Item 6: Default array for list items
DOD: Structure contains initial data, data is rendered in the main div on page load, all items should show their respective status

let tasks = [{
    content: "Take out the trash.",
    completed: true
  }, {
    content: "Brush your teeth.",
    completed: false
  }, {
    content: "Take over the world.",
    completed: false
}];

Item 6.1: Learn to add items to an html list
DOD: Demonstrate an ability to programmatically add item to html list. The item should contain the description as well as completed/uncompleted status
Item 6.2: Write a function that takes the title and status and adds item to a html list -> DOM manip happens here
DOD: Function exists and can be demonstrated
Item 6.3: Decide on a structure and move initial data into the structure
DOD: data is in the structure
Item 6.4: Iterate through a structure on page load and populate HTML list using the function from 6.2 -> Possible spike 2

Item 7: Display a form for adding new items (Only visual) // 1
DOD: Form is visible underneath the main rectangle,
    the form contains a text field and submit button,
    the form responds to ENTER as well as click,
    form has distinctive style matching overall style of the app

Item 8: Write a function that takes input from form in 7, adds the new item to the structure (6) and re-renders the list (6.4)

Item 9: Functional user input for array removals (Delete Item)
Item 10: Functional method to change item from Non\Completed (Array item property toggle)