Project: To-Do List
(remember to keep HTML valid)

//Backlog Refinement//

//Week 1//=======================================================================================================
Item 1: Display a rectangle //1
DOD: To clearly distinguish a rectangle on the DOM, whether by shadows, or background, or border or combo thereof

Item 2: Display a header in Item 1 //1
Blockers: Item 1
DOD: Title is clearly visible at the top of rectangle, and has a distinctive design

Item 3: Display Item List (No Logic\Mockup) //2
Blockers: Item 1
DOD: Display a list of hardcoded items underneath the header, with distinctive design, accommodate for large quantity of text.

=================================================================================================================

//Week 2//=======================================================================================================
Item 4: Distinguish between Non\Completed (No Logic\Mockup) //1
Blockers: Item 3
DOD: User can clearly delineate between complete and non-complete items through way of distinct visual cue.

Item 5: Each Item has a delete option (No Logic\Mockup) //1
Blockers: Item 3
DOD: Each list item has a button that (looks like it will) remove the item from the list
=================================================================================================================

Item 7: Display a form for adding new items (Only visual) // 1
DOD: Form is visible underneath the main rectangle,
    the form contains a text field and submit button,
    the form responds to ENTER as well as click,
    form has distinctive style matching overall style of the app


Item 6: Default array for list items
DOD: Structure contains initial data, data is rendered in the main div on page load, all items should show their respective status

const tasks = [{
    content: "Take out the trash.",
    completed: true
  }, {
    content: "Brush your teeth.",
    completed: false
  }, {
    content: "Take over the world.",
    completed: false
}];

Item 6.1: Learn to add items to an html list, Write a function that takes the title and status and adds item to a html list -> DOM manip happens here // 3
DOD: Function exists and can be demonstrated Function takes the title and status and adds item to a html list -> DOM manip happens here
renderItem("do a thing", false) -> this will add an item at the bottom of the list in HTML

Item 6.4: Write a function that renders the list to the DOM. Iterate through a structure on page load and populate HTML list using the function from 6.1 //2
Blocked by 6.1
DOD function exists and renders the data
HTML list starts empty and is populated by data from the structure on page load
renderAll(tasks) -> this will display items in the list (the function should auto run at load)


Item 8: Write a function that takes input from form in 7, adds the new item to the structure (6) and re-renders the list (6.4) //2
addNewItem("content") -> add the item to the data structure with completed set to false, clear the list in the dom, call renderAll

Item 11: Connect function in Item 8 to a form in item 7 and add basic validation (cannot be blank cannot be bigger than X chars, trim the edges)


Item 9: Functional user input for array removals (Delete Item)
Item 10: Functional method to change item from Non\Completed (Array item property toggle)






/// SPRINT 2

Spike1: Learn to manipulate DOM elements with JS   READ-SEARCH-TINKER-ASK  //5 PT spike
Selecting elements for manipulation
Creating new elements in memory
Appending new elements to the DOM
Cloning elements
Deleting elements
Modifying element content
Adding and removing classes from a DOM element
DOD: "Be able to demonstrate all of these actions in JS using any arbitrary DOM

Spike2: Learn functions //3 PT spike 
Must be familiar with the following topics/terms
Function declaration
Function parameter list
Function arguments
Function return value
Using function calls in expressions
Function call
What does hoisting mean
Arrow functions
functions as variables
GOTCHA = a lot of programmers haphazardly mis-use parameters and arguments
MUST BE ABLE TO TELL A CALL FROM A DECLARATION AT A GLANCE
DOD: "Be able to demonstrate all of the above concents but most importantly be able to declare a function according to signature (name and params),
be able to call and earlier declared function




Spike3: Learn logical constructs
Be familiar with the following topics
conditionals (<, >, ===, !==, <=, >=)
if statements
while loops
for loops



8 points

