Project: To-Do List
(remember to keep HTML valid)

//Backlog Refinement//


3s1 write a function that adds an item to the DOM   // 2
Function will have the signature of appendNewItemToDom(itemDescription: string, completed: boolean = false) -> void
DoD:
you can call appendNewItemToDom("get bread"); a new item appears in the list with uncomopleted status
calling appendNewItemToDom("get bread, true); a new item appears in the list with completed status

Special case: list is completely empty before call

3s2 item rendering should not be hardcoded in HTML, but rather in JS // 5
Move data to the data sturcture as indicated below
write a function to iterate over the structure and call appendNewItemToDom to append itemns to the list
call the function on load
function sigature is loadData(data: <object defined below>) -> void
Blocked by: 3s1

const tasks = [{
    content: "Take out the trash.",
    completed: true
  }, {
    content: "Brush your teeth.",
    completed: false
  }, {
    content: "Take over the world.",
    completed: false
}];

DoD as website loads, the list of items is displayed that hasn't been hardcoded into HTML

3s3: Spike: learn about HTML events and handling them \\3
Must be familiar with the following
Passing functions as arguments (higher order functions)
Functions that are called outside of context
attaching handlers to specific events
"click", "submit", "scroll" basic events
Event data structure
Accessing the DOM element after event dispatch
Reading values from form field element
DoD: be able to confidently attach an event handler to any element and explain a possible use case

3s4: create a handler for "add new item" form   // 2
create function handleNewItem and connect it to the form
The function should collect values from the form and call function from 3s1
blocked by 3s1, 3s3
DoD: when the field is filled in and the button is clicked, the new item should appear at the bottom of the list, the page should NOT reload

3s5: adjust styling for better user experience // 2
DOD:
items should be rectangular and distinct
text should be easily readable
item status should be distinct, use common knowledge symbolism for complete or incomplete (strikethough/green-red/icons) OR not AND
Delete button should be clearly visible and obvious to it's function
Add hover effects to line items, delete button, and add new button
no unused/unstyled items or empty space

Item 6: Default array for list items
DOD: Structure contains initial data, data is rendered in the main div on page load, all items should show their respective status

draft for future tickets

* delete handler
* status change handler
* MVP deployment 

==================END OF REFINEMENT


Item 6.1: Learn to add items to an html list, Write a function that takes the title and status and adds item to a html list -> DOM manip happens here // 3
DOD: Function exists and can be demonstrated Function takes the title and status and adds item to a html list -> DOM manip happens here
renderItem("do a thing", false) -> this will add an item at the bottom of the list in HTML

Item 6.4: Write a function that renders the list to the DOM. Iterate through a structure on page load and populate HTML list using the function from 6.1 //2
Blocked by 6.1
DOD function exists and renders the data
HTML list starts empty and is populated by data from the structure on page load
renderAll(tasks) -> this will display items in the list (the function should auto run at load)


Item 8: Write a function that takes input from form in 7, adds the new item to the structure (6) and re-renders the list (6.4) //2
addNewItem("content") -> add the item to the data structure with completed set to false, clear the list in the dom, call renderAll

Item 11: Connect function in Item 8 to a form in item 7 and add basic validation (cannot be blank cannot be bigger than X chars, trim the edges)


Item 9: Functional user input for array removals (Delete Item)
Item 10: Functional method to change item from Non\Completed (Array item property toggle)











Spike3: Learn logical constructs
Be familiar with the following topics
conditionals (<, >, ===, !==, <=, >=)
if statements
while loops
for loops



8 points

